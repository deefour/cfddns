#!/usr/bin/env php
<?php

/**
 * This compiler is a modified, non-OO version of the Composer compiler found at
 * https://github.com/composer/composer/blob/master/src/Composer/Compiler.php
 *
 * This is a derivation of the original work copyrighted by:
 *
 *  - Nils Adermann <naderman@naderman.de>
 *  - Jordi Boggiano <j.boggiano@seld.be>
 *
 * The license can be viewed at
 * https://github.com/composer/composer/blob/master/LICENSE
 */

require_once __DIR__ . '/../vendor/autoload.php';

use Symfony\Component\Finder\Finder;
use Symfony\Component\Process\Process;
use Colors\Color;

$pharFile = 'cfddns.phar';
$finder   = new Finder;



if (file_exists($pharFile)) {
  unlink($pharFile);
}

$phar = new Phar($pharFile, 0, $pharFile);
$phar->setSignatureAlgorithm(Phar::SHA1);
$phar->startBuffering();

$finder->files()
  ->ignoreVCS(true)
  ->name('*.php')
  ->in(__DIR__.'/../src/');

foreach ($finder as $file) {
  addFile($phar, $file);
}

$finder = new Finder;
$finder->files()
  ->ignoreVCS(true)
  ->name('*.php')
  ->name('*.md5')
  ->exclude('Tests')
  ->in(__DIR__ . '/../vendor/symfony/event-dispatcher/')
  ->in(__DIR__ . '/../vendor/guzzle/guzzle/src/')
  ->in(__DIR__ . '/../vendor/kevinlebrun/colors.php/src/');

foreach ($finder as $file) {
  addFile($phar, $file);
}

addFile($phar, new SplFileInfo(__DIR__ . '/../vendor/autoload.php'));
addFile($phar, new SplFileInfo(__DIR__ . '/../vendor/composer/autoload_namespaces.php'));
addFile($phar, new SplFileInfo(__DIR__ . '/../vendor/composer/autoload_psr4.php'));
addFile($phar, new SplFileInfo(__DIR__ . '/../vendor/composer/autoload_classmap.php'));
addFile($phar, new SplFileInfo(__DIR__ . '/../vendor/composer/autoload_real.php'));
addFile($phar, new SplFileInfo(__DIR__ . '/../vendor/composer/autoload_files.php'));
addFile($phar, new SplFileInfo(__DIR__ . '/../vendor/composer/ClassLoader.php'));

$content = file_get_contents(__DIR__ . '/../bin/cfddns');
$content = preg_replace('{^#!/usr/bin/env php\s*}', '', $content);

$phar->addFromString('bin/cfddns', $content);

$phar->setStub(<<<'EOF'
#!/usr/bin/env php
<?php

Phar::mapPhar('cfddns.phar');

require 'phar://cfddns.phar/bin/cfddns';

__HALT_COMPILER();
EOF
);

$phar->stopBuffering();

unset($phar);

echo (new Color)->__invoke("\n<magenta><bold>${pharFile} created!</bold></magenta>\n")->colorize();



function addFile($phar, $file, $strip = true) {
  $path = strtr(str_replace(dirname(__DIR__) . DIRECTORY_SEPARATOR, '', $file->getRealPath()), '\\', '/');

  echo (new Color)->__invoke("<green><bold>Adding</bold></green> ${path}\n")->colorize();

  $content = file_get_contents($file);
  if ($strip) {
    $content = stripWhitespace($content);
  }

  $phar->addFromString($path, $content);
}

function stripWhitespace($source) {
  if (!function_exists('token_get_all')) {
      return $source;
  }

  $output = '';
  foreach (token_get_all($source) as $token) {
    if (is_string($token)) {
      $output .= $token;
    } elseif (in_array($token[0], array(T_COMMENT, T_DOC_COMMENT))) {
      $output .= str_repeat("\n", substr_count($token[1], "\n"));
    } elseif (T_WHITESPACE === $token[0]) {
      $whitespace = preg_replace('{[ \t]+}', ' ', $token[1]);
      $whitespace = preg_replace('{(?:\r\n|\r|\n)}', "\n", $whitespace);
      $whitespace = preg_replace('{\n +}', "\n", $whitespace);
      $output .= $whitespace;
    } else {
      $output .= $token[1];
    }
  }

  return $output;
}
